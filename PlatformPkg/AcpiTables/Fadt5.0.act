
#include <IndustryStandard/Acpi.h>
#include <PlatformDefinition2.h>


//
// FADT Definitions
//
#ifndef EFI_ACPI_OEM_FADT_REVISION
#define EFI_ACPI_OEM_FADT_REVISION  0x00000000
#endif

//
// For ACPI 1.0 support
//
#define EFI_ACPI_INT_MODEL          0x01
/*
1 Desktop
2 Mobile
3 Workstation
4 Enterprise Server
5 SOHO Server
6 Appliance PC
7 Performance Server
*/
#define EFI_ACPI_PREFERRED_PM_PROFILE 0x01
#define EFI_ACPI_SCI_INT              0x0009
#define EFI_ACPI_SMI_CMD              0x082F
#define EFI_ACPI_S4_BIOS_REQ          0x00
#define EFI_ACPI_GPE1_BASE            0x10
#define EFI_ACPI_P_LVL2_LAT           101
#define EFI_ACPI_P_LVL3_LAT           1001
#define EFI_ACPI_FLUSH_SIZE           0x400
#define EFI_ACPI_FLUSH_STRIDE         0x10
#define EFI_ACPI_DUTY_OFFSET          0
#define EFI_ACPI_DUTY_WIDTH           0x04
#define EFI_ACPI_DAY_ALRM             0x7D
#define EFI_ACPI_MON_ALRM             0x7E
#define EFI_ACPI_CENTURY              0x7F

//
// IA-PC Boot Architecture Flags, see ACPI 2.0 table specification and Acpi2_0.h
// We should not use EFI_ACPI_2_0_8042 for legacy free platform, or XP reset fail. No impact to mobile.
//
//LNA-2016110801 #define EFI_ACPI_IAPC_BOOT_ARCH (EFI_ACPI_2_0_LEGACY_DEVICES | EFI_ACPI_2_0_8042 | EFI_ACPI_3_0_PCIE_ASPM_CONTROLS)
#define EFI_ACPI_IAPC_BOOT_ARCH (EFI_ACPI_2_0_LEGACY_DEVICES | EFI_ACPI_2_0_8042)//LNA-2016110801

//
// Fixed Feature Flags, see ACPI 2.0 table specification and Acpi2_0.h 
//
#define EFI_ACPI_FIXED_FEATURE_FLAGS (\
  EFI_ACPI_2_0_WBINVD | \
  EFI_ACPI_2_0_PROC_C1 | \
  EFI_ACPI_2_0_SLP_BUTTON | \
  EFI_ACPI_2_0_RTC_S4 | \
  EFI_ACPI_2_0_RESET_REG_SUP | \
  EFI_ACPI_3_0_USE_PLATFORM_CLOCK | \
  EFI_ACPI_3_0_S4_RTC_STS_VALID | \
  EFI_ACPI_3_0_REMOTE_POWER_ON_CAPABLE \
  )

//
// PM1A Event Register Block Generic Address Information
//
#define EFI_ACPI_PM1A_EVT_BLK_ADDRESS_SPACE_ID  EFI_ACPI_2_0_SYSTEM_IO
#define EFI_ACPI_PM1A_EVT_BLK_BIT_WIDTH         0x20
#define EFI_ACPI_PM1A_EVT_BLK_BIT_OFFSET        0x00
#define EFI_ACPI_PM1A_EVT_BLK_ADDRESS           0x800

//
// PM1B Event Register Block Generic Address Information
//
#define EFI_ACPI_PM1B_EVT_BLK_ADDRESS_SPACE_ID  EFI_ACPI_2_0_SYSTEM_IO
#define EFI_ACPI_PM1B_EVT_BLK_BIT_WIDTH         0x00
#define EFI_ACPI_PM1B_EVT_BLK_BIT_OFFSET        0x00
#define EFI_ACPI_PM1B_EVT_BLK_ADDRESS           0x0000000000000000

//
// PM1A Control Register Block Generic Address Information
//
#define EFI_ACPI_PM1A_CNT_BLK_ADDRESS_SPACE_ID  EFI_ACPI_2_0_SYSTEM_IO
#define EFI_ACPI_PM1A_CNT_BLK_BIT_WIDTH         0x10
#define EFI_ACPI_PM1A_CNT_BLK_BIT_OFFSET        0x00
#define EFI_ACPI_PM1A_CNT_BLK_ADDRESS           (EFI_ACPI_PM1A_EVT_BLK_ADDRESS + 0x04)

//
// PM1B Control Register Block Generic Address Information
//
#define EFI_ACPI_PM1B_CNT_BLK_ADDRESS_SPACE_ID  EFI_ACPI_2_0_SYSTEM_IO
#define EFI_ACPI_PM1B_CNT_BLK_BIT_WIDTH         0x00
#define EFI_ACPI_PM1B_CNT_BLK_BIT_OFFSET        0x00
#define EFI_ACPI_PM1B_CNT_BLK_ADDRESS           0x0000000000000000

//
// PM2 Control Register Block Generic Address Information
//
#define EFI_ACPI_PM2_CNT_BLK_ADDRESS_SPACE_ID   EFI_ACPI_2_0_SYSTEM_IO
#define EFI_ACPI_PM2_CNT_BLK_BIT_WIDTH          0x08
#define EFI_ACPI_PM2_CNT_BLK_BIT_OFFSET         0x00
#define EFI_ACPI_PM2_CNT_BLK_ADDRESS            0x22

//
// Power Management Timer Control Register Block Generic Address 
// Information
//
#define EFI_ACPI_PM_TMR_BLK_ADDRESS_SPACE_ID    EFI_ACPI_2_0_SYSTEM_IO
#define EFI_ACPI_PM_TMR_BLK_BIT_WIDTH           0x20
#define EFI_ACPI_PM_TMR_BLK_BIT_OFFSET          0x00
#define EFI_ACPI_PM_TMR_BLK_ADDRESS             (EFI_ACPI_PM1A_EVT_BLK_ADDRESS + 0x08)

//
// General Purpose Event 0 Register Block Generic Address
// Information
//
#define EFI_ACPI_GPE0_BLK_ADDRESS_SPACE_ID      EFI_ACPI_2_0_SYSTEM_IO
#define EFI_ACPI_GPE0_BLK_BIT_WIDTH             0x20
#define EFI_ACPI_GPE0_BLK_BIT_OFFSET            0x00
#define EFI_ACPI_GPE0_BLK_ADDRESS               (EFI_ACPI_PM1A_EVT_BLK_ADDRESS + 0x20)

//
// General Purpose Event 1 Register Block Generic Address
// Information
//
#define EFI_ACPI_GPE1_BLK_ADDRESS_SPACE_ID      EFI_ACPI_2_0_SYSTEM_IO
#define EFI_ACPI_GPE1_BLK_BIT_WIDTH             0x60///MTN_0317
#define EFI_ACPI_GPE1_BLK_BIT_OFFSET            0x00
#define EFI_ACPI_GPE1_BLK_ADDRESS               0x850

//
// Reset Register Generic Address Information
//
#define EFI_ACPI_RESET_REG_ADDRESS_SPACE_ID     EFI_ACPI_2_0_SYSTEM_IO
#define EFI_ACPI_RESET_REG_BIT_WIDTH            0x08
#define EFI_ACPI_RESET_REG_BIT_OFFSET           0x00
#define EFI_ACPI_RESET_REG_ADDRESS              0x0000000000000CF9
#define EFI_ACPI_RESET_VALUE                    0x06
 
//
// Number of bytes decoded by PM1 event blocks (a and b)
//
#define EFI_ACPI_PM1_EVT_LEN ((EFI_ACPI_PM1A_EVT_BLK_BIT_WIDTH + EFI_ACPI_PM1B_EVT_BLK_BIT_WIDTH) / 8)

//
// Number of bytes decoded by PM1 control blocks (a and b)
//
#define EFI_ACPI_PM1_CNT_LEN ((EFI_ACPI_PM1A_CNT_BLK_BIT_WIDTH + EFI_ACPI_PM1B_CNT_BLK_BIT_WIDTH) / 8)

//
// Number of bytes decoded by PM2 control block
//
#define EFI_ACPI_PM2_CNT_LEN (EFI_ACPI_PM2_CNT_BLK_BIT_WIDTH / 8)

//
// Number of bytes decoded by PM timer block
//
#define EFI_ACPI_PM_TMR_LEN (EFI_ACPI_PM_TMR_BLK_BIT_WIDTH / 8)

//
// Number of bytes decoded by GPE0 block
//
#define EFI_ACPI_GPE0_BLK_LEN (EFI_ACPI_GPE0_BLK_BIT_WIDTH / 8)

//
// Number of bytes decoded by GPE1 block
//
#define EFI_ACPI_GPE1_BLK_LEN (EFI_ACPI_GPE1_BLK_BIT_WIDTH / 8)







//------------------------------------------------------------------------------

//
// Fixed ACPI Description Table
// Please modify all values in Fadt.h only.
//

EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE Fadt = {
  EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE_SIGNATURE,
  sizeof (EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE),
  EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE_REVISION,

  0x00,                           // Checksum will be updated at runtime
  ' ', ' ', ' ', ' ', ' ', ' ',   // expected that these values will be updated at runtime
  0,
  EFI_ACPI_OEM_FADT_REVISION,
  0,
  0,

// --------------------- Body ---------------------
  //
  // These addresses will be updated at runtime
  //
  0x00000000,       // FirmwareCtrl
  0x00000000,       // Dsdt
  1,                // one are also allowed to maintain compatibility with ACPI 1.0. 
  EFI_ACPI_PREFERRED_PM_PROFILE,
  EFI_ACPI_SCI_INT,
  EFI_ACPI_SMI_CMD,
  EFI_ACPI_ENABLE_SW_SMI,
  EFI_ACPI_DISABLE_SW_SMI,
  EFI_ACPI_S4_BIOS_REQ,
  EFI_ACPI_PSTATE_ON_SW_SMI,
  
  EFI_ACPI_PM1A_EVT_BLK_ADDRESS,
  EFI_ACPI_PM1B_EVT_BLK_ADDRESS,
  EFI_ACPI_PM1A_CNT_BLK_ADDRESS,
  EFI_ACPI_PM1B_CNT_BLK_ADDRESS,
  EFI_ACPI_PM2_CNT_BLK_ADDRESS,
  EFI_ACPI_PM_TMR_BLK_ADDRESS,
  EFI_ACPI_GPE0_BLK_ADDRESS,
  EFI_ACPI_GPE1_BLK_ADDRESS,
  EFI_ACPI_PM1_EVT_LEN,
  EFI_ACPI_PM1_CNT_LEN,
  EFI_ACPI_PM2_CNT_LEN,
  EFI_ACPI_PM_TMR_LEN,
  EFI_ACPI_GPE0_BLK_LEN,
  EFI_ACPI_GPE1_BLK_LEN,
  EFI_ACPI_GPE1_BASE,
  EFI_ACPI_CSTATE_ON_SW_SMI,
  EFI_ACPI_P_LVL2_LAT,
  EFI_ACPI_P_LVL3_LAT,
  EFI_ACPI_FLUSH_SIZE,
  EFI_ACPI_FLUSH_STRIDE,
  EFI_ACPI_DUTY_OFFSET,
  EFI_ACPI_DUTY_WIDTH,
  EFI_ACPI_DAY_ALRM,
  EFI_ACPI_MON_ALRM,
  EFI_ACPI_CENTURY,
  EFI_ACPI_IAPC_BOOT_ARCH,
  EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_FIXED_FEATURE_FLAGS,

  //
  // Reset Register Block
  //
  EFI_ACPI_RESET_REG_ADDRESS_SPACE_ID,
  EFI_ACPI_RESET_REG_BIT_WIDTH,
  EFI_ACPI_RESET_REG_BIT_OFFSET,
  EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_RESET_REG_ADDRESS,

  EFI_ACPI_RESET_VALUE,
  EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_RESERVED_BYTE,

  //
  // These addresses will be updated at runtime
  //
  0x0000000000000000, // X_FIRMWARE_CTRL
  0x0000000000000000, // X_DSDT

  //
  // X_PM1a Event Register Block
  //
  EFI_ACPI_PM1A_EVT_BLK_ADDRESS_SPACE_ID,
  EFI_ACPI_PM1A_EVT_BLK_BIT_WIDTH,
  EFI_ACPI_PM1A_EVT_BLK_BIT_OFFSET,
  2,//EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_PM1A_EVT_BLK_ADDRESS,

  //
  // X_PM1b Event Register Block
  //
  EFI_ACPI_PM1B_EVT_BLK_ADDRESS_SPACE_ID,
  EFI_ACPI_PM1B_EVT_BLK_BIT_WIDTH,
  EFI_ACPI_PM1B_EVT_BLK_BIT_OFFSET,
  2,//EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_PM1B_EVT_BLK_ADDRESS,

  //
  // X_PM1a Control Register Block
  //
  EFI_ACPI_PM1A_CNT_BLK_ADDRESS_SPACE_ID,
  EFI_ACPI_PM1A_CNT_BLK_BIT_WIDTH,
  EFI_ACPI_PM1A_CNT_BLK_BIT_OFFSET,
  2,//EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_PM1A_CNT_BLK_ADDRESS,

  //
  // X_PM1b Control Register Block
  //
  EFI_ACPI_PM1B_CNT_BLK_ADDRESS_SPACE_ID,
  EFI_ACPI_PM1B_CNT_BLK_BIT_WIDTH,
  EFI_ACPI_PM1B_CNT_BLK_BIT_OFFSET,
  2,//EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_PM1B_CNT_BLK_ADDRESS,

  //
  // X_PM2 Control Register Block
  //
  EFI_ACPI_PM2_CNT_BLK_ADDRESS_SPACE_ID,
  EFI_ACPI_PM2_CNT_BLK_BIT_WIDTH,
  EFI_ACPI_PM2_CNT_BLK_BIT_OFFSET,
  1,//EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_PM2_CNT_BLK_ADDRESS,

  //
  // X_PM Timer Control Register Block
  //
  EFI_ACPI_PM_TMR_BLK_ADDRESS_SPACE_ID,
  EFI_ACPI_PM_TMR_BLK_BIT_WIDTH,
  EFI_ACPI_PM_TMR_BLK_BIT_OFFSET,
  3,//EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_PM_TMR_BLK_ADDRESS,

  //
  // X_General Purpose Event 0 Register Block
  //
  EFI_ACPI_GPE0_BLK_ADDRESS_SPACE_ID,
  EFI_ACPI_GPE0_BLK_BIT_WIDTH,
  EFI_ACPI_GPE0_BLK_BIT_OFFSET,
  1,//EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_GPE0_BLK_ADDRESS,

  //
  // X_General Purpose Event 1 Register Block
  //
  EFI_ACPI_GPE1_BLK_ADDRESS_SPACE_ID,
  EFI_ACPI_GPE1_BLK_BIT_WIDTH,
  EFI_ACPI_GPE1_BLK_BIT_OFFSET,
  1,//EFI_ACPI_RESERVED_BYTE,
  EFI_ACPI_GPE1_BLK_ADDRESS,

  //0, 0, 0, 0, 0,        // SLEEP_CONTROL_REG
  //0, 0, 0, 0, 0,        // SLEEP_STATUS_REG
    
};

VOID*
ReferenceAcpiTable (
  VOID
  )
{
  //
  // Reference the table being generated to prevent the optimizer from removing the 
  // data structure from the exeutable
  //
  return (VOID*)&Fadt;
}

