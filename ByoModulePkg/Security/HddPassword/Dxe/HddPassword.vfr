///** @file
//
//Copyright (c) 2006 - 2011, Byosoft Corporation.<BR> 
//All rights reserved.This software and associated documentation (if any)
//is furnished under a license and may only be used or copied in 
//accordance with the terms of the license. Except as permitted by such
//license, no part of this software or documentation may be reproduced, 
//stored in a retrieval system, or transmitted in any form or by any 
//means without the express written consent of Byosoft Corporation.
//
//File Name:
//  HddPassword.vfr
//
//Abstract: 
//  vfr file for Hdd password DXE driver.
//
//Revision History:
//
// Bug 3211 - Add a setup item to control enable HDD frozen or not. 
// TIME:       2011-12-09
// $AUTHOR:    ZhangLin
// $REVIEWERS:
// $SCOPE:     Sugar Bay.
// $TECHNICAL: 
//  1. add a setup save notify protocol. NV Variable should be
//     handled by module itself.
//$END--------------------------------------------------------------------
//
//Bug 2722 - Fix HDD Password status is not correct under setup.
//TIME: 2011-08-12
//$AUTHOR: Zhang Lin
//$REVIEWERS: 
//$SCOPE: SugarBay
//$TECHNICAL: 
//  1. According to ATA spec, there is no way to disable master password.
//     so we make a internal rule: if master password revision code is
//     same as manufacturer predefined, we treat it as uninstalled. And
//     if user want to disable master password, we set revision code as
//     manufacturer(0xFFFE).
//  2. Hide item "Set Master Password" if user password has not been set.
//$END--------------------------------------------------------------------
//
// Bug 2720 - Fix Master Password min length is 0 caused by revision 488 
//            coding error. 
//TIME: 2011-08-11
//$AUTHOR: Zhang Lin
//$REVIEWERS: 
//$SCOPE: SugarBay
//$TECHNICAL: 
//  1. Master password valid length should be from 1 to 32, not 0 ~ 32.
//$END--------------------------------------------------------------------
//
//
//Bug 2654 : Modify user HDD password's have not check old user passowrd 
//           of match.
//TIME: 2011-08-11
//$AUTHOR: Zhang Lin
//$REVIEWERS: 
//$SCOPE: SugarBay
//$TECHNICAL: 
//  1. Check user input password with saved old password, if not equal, 
//     reject it.
//  2. this revision also remove item "disable user password". when new
//     password is empty, it means remove it.
//  3. show set user password result on the screen.
//  4. valid password length is from 1 to 32.
//$END--------------------------------------------------------------------
//
//Bug 2650: Update hddpassword policy.
//TIME: 2011-08-04
//$AUTHOR: Zhang Lin
//$REVIEWERS: 
//$SCOPE: SugarBay
//$TECHNICAL: 
//    1. set password input length range as 6 to 32 instead of 1 to 32 under setup.
//       And show this info at HDD Password Description area under security page 
//       under setup.
//    2. at password input popup window during post, prompt meet password max length
//       limit when password input length reach 32.
//    3. update "HDD Password Description" under setup.
//$END--------------------------------------------------------------------
//
//
//Bug 2596: add more prompts for hdd password in setup.
//TIME: 2011-07-28
//$AUTHOR: Zhang Lin
//$REVIEWERS: 
//$SCOPE: SugarBay
//$TECHNICAL: 
//  1. add more prompts for hdd password in setup.
//$END--------------------------------------------------------------------
//
//**/




#include "HddPasswordNVDataStruc.h"

formset
  guid      = HDD_PASSWORD_CONFIG_GUID,
  title     = STRING_TOKEN(STR_HDD_SECURITY_CONFIG),
  help      = STRING_TOKEN(STR_HDD_SECURITY_CONFIG),
  classguid = EFI_HII_PLATFORM_SETUP_FORMSET_GUID,
  class     = 15,
  subclass  = 0,
  
  varstore HDD_PASSWORD_CONFIG,
  name = HDD_PASSWORD_CONFIG,
  guid = HDD_PASSWORD_CONFIG_GUID;

  varstore HDD_PASSWORD_NV_CONFIG,
  name = HPW_NV_CONF,
  guid = HDD_PASSWORD_CONFIG_GUID;  

  form formid = FORMID_HDD_MAIN_FORM,
    title  = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);
    
    oneof
      varid       = HPW_NV_CONF.FrozenAllHdds,
      questionid  = KEY_HDD_FROZEN_ALL,
      prompt      = STRING_TOKEN(STR_SECURITY_HDD_FROZEN_ALL),
      help        = STRING_TOKEN(STR_SECURITY_HDD_FROZEN_ALL_HELP),
      flags       = INTERACTIVE,
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = 0;
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT;
    endoneof;
    
    subtitle text = STRING_TOKEN(STR_NULL);
    subtitle text = STRING_TOKEN(STR_HDD_SECURITY_CONFIG_TIPS0);
    subtitle text = STRING_TOKEN(STR_HDD_SECURITY_CONFIG_TIPS1);
    subtitle text = STRING_TOKEN(STR_NULL); 

    label HDD_DEVICE_ENTRY_LABEL;
    label HDD_DEVICE_LABEL_END;

  endform;  

  form
    formid = FORMID_HDD_DEVICE_FORM,
    title = STRING_TOKEN(STR_IDE_SECURITY_HD);

    subtitle text = STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC);

    subtitle text = STRING_TOKEN(STR_NULL); 

        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE);
        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO);
        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE);
        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR);
        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE);
        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_SIX);
        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_SEVEN);
        subtitle text = STRING_TOKEN(STR_NULL); 
        subtitle text = STRING_TOKEN(STR_HDD_PASSWORD_CONFIG);
//-     subtitle text = STRING_TOKEN(STR_NULL);
        
    suppressif TRUE;
        numeric varid   = HDD_PASSWORD_CONFIG.Supported,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
        endnumeric;

        numeric varid   = HDD_PASSWORD_CONFIG.Frozen,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
        endnumeric;

        numeric varid   = HDD_PASSWORD_CONFIG.Enabled,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
                step    = 0,
        endnumeric;
        
        numeric varid   = HDD_PASSWORD_CONFIG.CountExpired,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
                step    = 0,
        endnumeric;
        
        numeric varid   = HDD_PASSWORD_CONFIG.Locked,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
                step    = 0,
        endnumeric;

        numeric varid   = HDD_PASSWORD_CONFIG.UserPasswordStatus,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
                step    = 0,
        endnumeric;

        numeric varid   = HDD_PASSWORD_CONFIG.MasterPasswordStatus,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
                step    = 0,
        endnumeric;
    endif;

        grayoutif  TRUE;
/*        
        suppressif ideqvallist HDD_PASSWORD_CONFIG.Supported == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_SUPPORTED),
                text   = STRING_TOKEN(STR_YES),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Supported == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_SUPPORTED),
                text   = STRING_TOKEN(STR_NO),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Enabled == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_ENABLED),
                text   = STRING_TOKEN(STR_YES),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Enabled == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_ENABLED),
                text   = STRING_TOKEN(STR_NO),
                flags  = 0,
                key    = 0;
        endif;
*/
        suppressif ideqvallist HDD_PASSWORD_CONFIG.CountExpired == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_COUNT_EXPIRED),
                text   = STRING_TOKEN(STR_YES),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.CountExpired == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_COUNT_EXPIRED),
                text   = STRING_TOKEN(STR_NO),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Locked == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_LOCKED),
                text   = STRING_TOKEN(STR_YES),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Locked == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_LOCKED),
                text   = STRING_TOKEN(STR_NO),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Frozen == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_FROZEN),
                text   = STRING_TOKEN(STR_YES),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Frozen == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_FROZEN),
                text   = STRING_TOKEN(STR_NO),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.UserPasswordStatus == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_IDE_USER_PASSWORD_STS),
                text   = STRING_TOKEN(STR_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.UserPasswordStatus == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_IDE_USER_PASSWORD_STS),
                text   = STRING_TOKEN(STR_NOT_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.MasterPasswordStatus == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_STS),
                text   = STRING_TOKEN(STR_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.MasterPasswordStatus == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_STS),
                text   = STRING_TOKEN(STR_NOT_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;
        endif;

        subtitle text = STRING_TOKEN(STR_NULL); 

        suppressif ideqval HDD_PASSWORD_CONFIG.Supported == 0 OR ideqval HDD_PASSWORD_CONFIG.Frozen == 1 OR ideqval HDD_PASSWORD_CONFIG.CountExpired == 1;
          password varid  = HDD_PASSWORD_CONFIG.IdeUserPassword,
                prompt      = STRING_TOKEN(STR_IDE_USER_PASSWORD),
                help        = STRING_TOKEN(STR_IDE_USER_PASSWORD_HELP),
                flags       = INTERACTIVE | RESET_REQUIRED,
                key         = KEY_HDD_USER_PASSWORD,
                minsize     = HDD_USER_PASSOWORD_MIN_LENGTH,
                maxsize     = HDD_USER_PASSOWORD_MAX_LENGTH,
                encoding    = 1,
          endpassword;
        endif;
        suppressif ideqval HDD_PASSWORD_CONFIG.Supported == 0 OR ideqval HDD_PASSWORD_CONFIG.Frozen == 1 OR ideqval HDD_PASSWORD_CONFIG.Locked == 1 OR ideqval HDD_PASSWORD_CONFIG.Enabled == 0 OR ideqval HDD_PASSWORD_CONFIG.CountExpired == 1;
          password varid  = HDD_PASSWORD_CONFIG.IdeMasterPassword,
                prompt      = STRING_TOKEN(STR_IDE_MASTER_PASSWORD),
                help        = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_HELP),
                flags       = INTERACTIVE | RESET_REQUIRED,
                key         = KEY_HDD_MASTER_PASSWORD,
                minsize     = HDD_MASTER_PASSOWORD_MIN_LENGTH,
                maxsize     = HDD_MASTER_PASSOWORD_MAX_LENGTH,
                encoding    = 1,
          endpassword;
        endif;
  endform;

endformset;
