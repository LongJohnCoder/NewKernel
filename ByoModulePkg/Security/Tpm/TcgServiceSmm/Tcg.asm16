; @file
;
;Copyright (c) 2006 - 2012, Byosoft Corporation.<BR> 
;All rights reserved.This software and associated documentation (if any)
;is furnished under a license and may only be used or copied in 
;accordance with the terms of the license. Except as permitted by such
;license, no part of this software or documentation may be reproduced, 
;stored in a retrieval system, or transmitted in any form or by any 
;means without the express written consent of Byosoft Corporation.
;
;File Name:
;  Tcg.asm16
;
;Abstract: 
;  tpm legacy int 1A support
;
;Revision History:
;$END--------------------------------------------------------------------
;
;
; This file contains a 'Sample Driver' and is licensed as such
; under the terms of your license agreement with Intel or your
; vendor.  This file may be modified by the user, subject to  
; the additional terms of the license agreement               
;
;
; Copyright (c)  2010 - 2011, Intel Corporation. All rights reserved
; This software and associated documentation (if any) is furnished
; under a license and may only be used or copied in accordance
; with the terms of the license. Except as permitted by such
; license, no part of this software or documentation may be
; reproduced, stored in a retrieval system, or transmitted in any
; form or by any means without the express written consent of
; Intel Corporation.
;
;
; Module Name:
; 
;    Tcg.asm16
;
        NAME    TCGDSR
        TITLE   Trusted Computing Group DSR

;====================================================================
; INT1A Entry IF TCG Fn Jump to TCGDSR
;--------------------------------------------------------------------

;
; This service routine supports the following int 1Ah functions:
;
;       AH = 0bbh - TCG Application Interface
;
;          AL = 00H - TCG_StatusCheck
;               01H - TCG_HashLogExtendEvent
;               02h - TCG_PassThroughToTPM
;               03h - TCG_ShutdownPreBootInterface
;               04h - TCG_LogEvent
;               05h - TCG_HashAll
;               06h - TCG_TSS
;               07h - TCG_CompactHashLogExtendEvent
;               08h - TCG_SetMemoryOverwriteRequestBit
;
;------------------------------------------------------------------------

;************************************************************************
;*      Include Files                                                   *
;************************************************************************
.586

TCG_APP_INTERFACE       equ     0BBh

; The TCG Application Interface subfunctions are loaded into AL
;
; !! These values need to match the SMIFN_TCG values in SMI.INC !!
;
TCG_StatusCheck                 equ     00h
TCG_HashLogExtendEvent          equ     01h
TCG_PassThroughToTPM            equ     02h
TCG_ShutdownPreBootInterface    equ     03h
TCG_HashLogEvent                equ     04h
TCG_HashAll                     equ     05h
TCG_TSS                         equ     06h
TCG_CompactHashLogExtendEvent   equ     07h
TCG_MemoryOverwriteRequest      equ     08h
TCG_Last_Func                   equ     08h ; sanity check for Int 1Ah interface


ISSUE_ASMI MACRO cmd, ah_value
        mov     ah, ah_value
        mov     al, cmd
        ASMI
ENDM


ASMI MACRO
        mov     dx, cs:[SmiPort]
        out     dx, al
        WAFORIO
ENDM

MAGIC_STONE     equ     (84h)           ; An unused I/O Port
WAFORIO macro                           ; Delay about a microsecond.
        out     MAGIC_STONE,al          ; Must not change CPU state.
endm                                    ;

;----------------------------------------------------------------
TCG_SMI_STATUS                  equ     TCG_StatusCheck                 ;000h
TCG_SMI_HASHLOGEXTEND           equ     TCG_HashLogExtendEvent          ;001h
TCG_SMI_PTTT                    equ     TCG_PassThroughToTPM            ;002h
TCG_SMI_SHUTDOWN                equ     TCG_ShutdownPreBootInterface    ;003h
TCG_SMI_HASHLOG                 equ     TCG_LogEvent                    ;004h
TCG_SMI_HASH                    equ     TCG_HashAll                     ;005h
TCG_SMI_TSS                     equ     TCG_TSS                         ;006h
TCG_SMI_COMPACTHASHLOGEXTEND    equ     TCG_CompactHashLogExtendEvent   ;007h
TCG_SMI_MOR                     equ     TCG_MemoryOverwriteRequest      ;008h
TCG_SMI_DRVRINIT                equ     020h                            ;020h
TCG_SMI_MEASURE_LOADER_IPL      equ     080h



;************************************************************************
;*      Code Segment                                                    *
;************************************************************************

TcgS SEGMENT USE16
        assume  ds:nothing, es:nothing

OldIntHandler LABEL DWORD
        NextVectorOffset          DW      4624h ;F$
        NextVectorSeg             DW      5849h ;XI

        cmp     ah, TCG_APP_INTERFACE   ; TCG interface
        je      short TCGDSR
        jmp     DWORD PTR cs:[OldIntHandler]
TCGDSR:

        push    edi                             ; For most TCG INT 1Ah calls
        push    esi                             ; all registers except EAX
        push    ebx                             ; need to be preserved.
        push    edx

        cmp     al, TCG_StatusCheck             ; status check request?
        je      StatusCheck                     ; yes, process it

        cmp     ebx, 41504354h                  ; "TCPA" signature indicates valid
        jne     bad_exit                        ; function call, exit if missing

        cmp     al, TCG_CompactHashLogExtendEvent ; compact hash log extend request?
        jne     not_CompactHashLogExtendEvent     ; no, process it

CompactHashLogExtendEvent:

        pop     edx                             ; EDX was modified when testing the
        push    edx                             ; TPM, restore EDX and balance the stack

        ; ES:DI points to the buffer to be hashed.  In preperation for the SMI
        ; call to the TPM driver interface put the flat ES:DI pointer into EDI
        ; then make the SMI call.
        ;
        mov     ebx, es
        shl     ebx, 4
        and     edi, 0ffffh
        add     ebx, edi
        mov     edi, ebx                        ; edi = es:di
        
        ; dx is used by smi trigger, so here we should protect it.
        ; let us mov it to edx high word.
        shl     edx, 16

        ISSUE_ASMI byte ptr cs:[SmiCommand], TCG_SMI_COMPACTHASHLOGEXTEND

        ; For Compact Hash Log Extend Event, EDX holds the event number for
        ; the event that was extended.  The common exit code restores EDX
        ; from the stack so we need to modify EDX on the stack.
        ;
        pop     ebx                             ; remove saved EDX from stack
        push    edx                             ; put updated EDX on stack

        jmp     good_exit                       ; exit with success.


StatusCheck:

        ; We will be modifying EBX, EDX, ESI and EDI so we need to
        ; remove them from the stack until after the SMI call.
        ;
        pop     edx                             ; balance stack
        pop     ebx                             ; balance stack
        pop     esi                             ; balance stack
        pop     edi                             ; balance stack

        ISSUE_ASMI byte ptr cs:[SmiCommand], TCG_SMI_STATUS    ; SMI call

        push    edi                             ; balance stack
        push    esi                             ; balance stack
        push    ebx                             ; balance stack
        push    edx                             ; balance stack
        jmp     good_exit

not_CompactHashLogExtendEvent:

        cmp     al, TCG_SMI_MEASURE_LOADER_IPL
        jne     short @f
        cmp     ecx, 'BYO'
        jne     short @f
        cmp     edx, 'SOFT'
        jne     short @f
        jmp     short FuncNumOK
@@:
        cmp     al, TCG_Last_Func               ; valid request?
        ja      bad_exit                        ; no, exit with error

        ; For most TCG INT 1Ah calls, ES:DI points to an input buffer and
        ; DS:SI points to an output buffer.  In preparation for the SMI
        ; call to the TPM driver interface put the flat ES:DI pointer into
        ; EDI and the flat DS:SI pointer int ESI
        ;
FuncNumOK:
        mov     ebx, es
        shl     ebx, 4
        and     edi, 0ffffh
        add     ebx, edi
        mov     edi, ebx

        mov     ebx, ds
        shl     ebx, 4
        and     esi, 0ffffh
        add     ebx, esi
        mov     esi, ebx

        ; The SMI sub-function call is the same as the TCG INT 1Ah sub
        ; function call.  Put the sub-function call in AH and the
        ; SMI function call in AL.
        ;
        shl     ax, 8
        mov     al, byte ptr cs:[SmiCommand]
        ASMI
        jmp     good_exit

bad_exit:
        mov     ah, 86h                         ; On all errors, report 086h
        stc                                     ; and set the carry flag.
        jmp     all_exit

good_exit:
        clc                                     ; On success carry is cleared

all_exit:
        pop     edx                             ; For most TCG INT 1Ah calls
        pop     ebx                             ; all registers except EAX
        pop     esi                             ; need to be preserved.
        pop     edi

        iret                                    ; done

SmiPort    LABEL WORD
        dw   0b2h        
        
SmiCommand LABEL BYTE
        DB   024h                               ; '$'. Data to write to B2 port, fixed at runtime.

TcgS ENDS
        END
